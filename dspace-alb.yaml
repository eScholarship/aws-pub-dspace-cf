---
  AWSTemplateFormatVersion: '2010-09-09'
  Description: Template for creating our DSpace reverse proxy/load balancer

  Parameters:
    VpcId:
      Type: AWS::EC2::VPC::Id
      Description: The VPC ID where the load balancer will be created
    SubnetIds:
      Type: List<AWS::EC2::Subnet::Id>
      Description: A list of subnet IDs where the load balancer will be created
    LoadBalancerName:
      Type: String
      Description: A name for the load balancer
    DomainName:
      Type: String
      Description: the domain name for this DSpace site
    CertificateArn:
      Type: String
      Description: The ARN of the SSL/TLS certificate to use for HTTPS listener
    ApiInstancePort:
      Type: Number
      Description: The port number to forward /server/* and /server URL patterns to on the API instance
    ClientInstancePort:
      Type: Number
      Description: The port number to forward all other URL patterns to on the client instance
    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup::Id
      Description: The ID of the security group to apply to both the API and client instances
    LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup::Id
      Description: The ID of the security group to apply to the load balancer

  Metadata:
    UnusedParams: # cfn-lint ignore
      ApiInstancePort: !Ref ApiInstancePort
      ClientInstancePort: !Ref ClientInstancePort
      InstanceSecurityGroup: !Ref InstanceSecurityGroup
      LoadBalancerSecurityGroup: !Ref LoadBalancerSecurityGroup

  Resources:
    # 1. Create the Elastic Load Balancer resource
    LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: !Ref LoadBalancerName
        Scheme: internet-facing
        Type: application
        IpAddressType: ipv4
        SecurityGroups:
          - !ImportValue SecurityGroupELB
        Subnets: !Split [",", !Ref SubnetIds]
  
    # 2: Create target groups for the API and client instances
    APITargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Join [ "-", [ !Ref LoadBalancerName, "api-target-group" ] ]
        Port: 8080
        Protocol: HTTP
        TargetType: instance
        VpcId: !Ref VpcId
        HealthCheckIntervalSeconds: 30
        HealthCheckPath: /api/health
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 5
  
    ClientTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Join [ "-", [ !Ref LoadBalancerName, "client-target-group" ] ]
        Port: 443
        Protocol: HTTPS
        TargetType: instance
        VpcId: !Ref VpcId
        HealthCheckIntervalSeconds: 30
        HealthCheckPath: /health
        HealthCheckProtocol: HTTPS
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 5
  
    # 3: Create listeners for the load balancer
    ListenerHttp:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: redirect
            RedirectConfig:
              Host: "#{host}"
              Path: "/#{path}?#{query}"
              Port: "443"
              Protocol: "HTTPS"
              Query: "#{query}"
              StatusCode: HTTP_301
        LoadBalancerArn: !Ref LoadBalancer
        Port: 80
        Protocol: HTTP

    ListenerHttps:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref LoadBalancer
        Port: 443
        Protocol: HTTPS
        SslPolicy: ELBSecurityPolicy-2016-08
        Certificates:
          - CertificateArn: !Ref CertificateArn
        DefaultActions:
          - Type: fixed-response
            FixedResponseConfig:
              StatusCode: '200'
              ContentType: text/plain
              MessageBody: 'Healthy'
    DSpaceLoadBalancerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - TargetGroupArn: !Ref APITargetGroup
            Type: forward
        Conditions:
          - Field: path-pattern
            Values:
                - /server/*
                - /server
        ListenerArn: !Ref ListenerHttps
        Priority: 1
    RedirectHttpToHttpsRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - Type: redirect
            RedirectConfig:
              Port: '443'
              Protocol: HTTPS
              StatusCode: HTTP_301
        Conditions:
          - Field: host-header
            Values:
              - !Ref DomainName
          - Field: protocol
            Values:
              - HTTP
        ListenerArn: !Ref ListenerHttp
        Priority: 1
            

        ### remaining TODOs ####################################################
        ### TODO: Add health checks
        ### TODO: Add tags  
  
  # TODO: 4. Create the EC2 instances and attach them to the target groups
  
  # TODO: 5. Add tags to the resources for better organization and management
  
  # TODO: 6. Output the load balancer DNS name for easier access
  